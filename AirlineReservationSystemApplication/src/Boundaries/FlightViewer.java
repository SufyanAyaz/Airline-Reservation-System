package Boundaries;

import Controller.FlightInfoController;
import javax.swing.*;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

// import Controller.FlightInfoController;
import Entities.Flight;

public class FlightViewer extends javax.swing.JFrame {
    ArrayList<ArrayList<String>> codes;
    private guestView guest;
    private registeredUserView registered;
    private tourismAgentView tourism;
    private airlineAgentView airlineAgent;
    private SeatViewer seat;

    /**
     * Creates new form FlightViewer
     */
    public FlightViewer(guestView gUser, registeredUserView rUser, tourismAgentView tAgent, airlineAgentView aAgent) {
        initComponents();
        guest = gUser;
        registered = rUser;
        tourism = tAgent;
        airlineAgent = aAgent;
        try {
            FlightInfoController.createConnection();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the SQLException, show an error dialog, log, etc.
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        departureLabel = new javax.swing.JLabel();
        departureText = new javax.swing.JTextField();
        arrivalLabel = new javax.swing.JLabel();
        arrivalText = new javax.swing.JTextField();
        dateText = new javax.swing.JFormattedTextField();
        dateLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        selectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        departureLabel.setText("Leave From:");
        arrivalLabel.setText("Arrive At:");

        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        dateText.setToolTipText("");

        dateLabel.setText("Date(MM/DD/YY)");

        searchButton.setText("Search");

        backButton.setText("Back");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(backButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 773,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(departureLabel)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(departureText,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 167,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(arrivalLabel)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(arrivalText,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 162,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(dateLabel)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(dateText,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 105,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(searchButton))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(341, 341, 341)
                                                .addComponent(selectButton)))
                                .addContainerGap(20, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backButton)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(departureLabel)
                                        .addComponent(departureText, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(arrivalLabel)
                                        .addComponent(arrivalText, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateLabel)
                                        .addComponent(searchButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(selectButton)
                                .addContainerGap(39, Short.MAX_VALUE)));

        pack();

        try {
            FlightInfoController.createConnection();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the SQLException, show an error dialog, log, etc.
        }

        try {
            List<String> flights = FlightInfoController.getFlights();
            DefaultListModel<String> tempModel = new DefaultListModel<>();
            for (String flight : flights) {
                tempModel.addElement(flight);
            }
            jList1.setModel(tempModel);
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle the SQLException, show an error dialog, log, etc.
        }
    }

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Get the selected index from the JList
        int selectedIndex = jList1.getSelectedIndex();

        // Check if an item is selected
        if (selectedIndex != -1) {
            // Retrieve the selected value based on the index
            String selectedValue = jList1.getModel().getElementAt(selectedIndex);

            // Split the string based on commas
            String[] parts = selectedValue.split(", ");

            // Iterate through the parts to find the one that starts with "Model:"
            String modelPart = null;
            for (String part : parts) {
                if (part.startsWith("Model:")) {
                    modelPart = part;
                    break;
                }
            }

            // If modelPart is not null, extract the value after "Model: "
            String modelValue = null;
            if (modelPart != null) {
                modelValue = modelPart.substring("Model: ".length());
            }

            System.out.println(modelValue);
            FlightInfoController.seatCreator(modelValue);

            String input = JOptionPane.showInputDialog(this, "Enter the number of tickets:");
            try {
                int numberOfTickets = Integer.parseInt(input);

                // Do something with the number of tickets, for example, record it
                System.out.println("Number of Tickets: " + numberOfTickets);

                // Now you can proceed with other actions or display the SeatViewer
                seat = new SeatViewer(modelValue, numberOfTickets);
                seat.setVisible(true);
                setVisible(false);
            } catch (NumberFormatException e) {
                // Handle the case where the user did not enter a valid number
                JOptionPane.showMessageDialog(this, "Please enter a valid number for tickets.");
            }
            // You can do more actions with the selected item here...
        } else {
            // No item is selected, show a message or perform other actions
            JOptionPane.showMessageDialog(this, "Please select a flight.");
        }
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (guest != null && registered == null && tourism == null && airlineAgent == null) {
            guest.setVisible(true);
            setVisible(false);
        } else if (guest == null && registered != null && tourism == null && airlineAgent == null) {
            registered.setVisible(true);
            setVisible(false);
        } else if (guest == null && registered == null && tourism != null && airlineAgent == null) {
            tourism.setVisible(true);
            setVisible(false);
        } else if (guest == null && registered == null && tourism == null && airlineAgent != null) {
            airlineAgent.setVisible(true);
            setVisible(false);
        }
        this.dispose();
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String departure = departureText.getText();
            String arrival = arrivalText.getText();
            String date = dateText.getText();

            List<String> allFlights = FlightInfoController.getAllFlights(departure, arrival, date);
            // Create a new DefaultListModel
            DefaultListModel<String> listModel = new DefaultListModel<>();

            // Add each string from the search results to the model
            for (String flight : allFlights) {
                listModel.addElement(flight);
            }

            // Set the new model to the JList
            jList1.setModel(listModel);
            System.out.println("SearchPressed");
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle the SQLException, show an error dialog, log, etc.
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel arrivalLabel;
    private javax.swing.JTextField arrivalText;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JFormattedTextField dateText;
    private javax.swing.JLabel departureLabel;
    private javax.swing.JTextField departureText;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectButton;
    // End of variables declaration
}
