package Boundaries;

import Boundaries.SeatViewer.SelectedSeatInfo;

import Controller.PaymentController;
import Controller.FlightInfoController;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MakePayment extends JFrame {
    private SeatViewer seats;
    private String model;
    private List<SelectedSeatInfo> selectedSeatsInfo;
    private String fName;
    private String lName;
    private String email;
    private String ccNum;
    private int total = 0;

    /**
     * Creates new form MakePayment
     */
    public MakePayment(SeatViewer seatView, String model, List<SelectedSeatInfo> selectedSeatsInfo) {
        this.seats = seatView;
        this.model = model;
        this.selectedSeatsInfo = selectedSeatsInfo;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        setTitle("Payment Information");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        try {
            FlightInfoController.createConnection();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the SQLException, show an error dialog, log, etc.
        }

        // Create a panel to hold the components
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));

        List<Integer> seatIds = new ArrayList<>();
        List<String> seatTypes = new ArrayList<>();
        List<Integer> seatNumbers = new ArrayList<>();

        // Display selected seats at the top
        JPanel selectedSeatsPanel = new JPanel();
        selectedSeatsPanel.setBorder(BorderFactory.createTitledBorder("Selected Seats"));
        for (SelectedSeatInfo seatInfo : selectedSeatsInfo) {
            int cost = FlightInfoController.getSeatCost(model, seatInfo.getId(), seatInfo.getSeatType(),
                    seatInfo.getNumOfSeats());
            JLabel seatLabel = new JLabel("Seat ID: " + seatInfo.getId() +
                    ", Seat Type: " + seatInfo.getSeatType() +
                    ", Seat Number: " + seatInfo.getNumOfSeats() +
                    "Seat Cost: " + cost + "\n");
            total = total + cost;
            seatIds.add(seatInfo.getId());
            seatTypes.add(seatInfo.getSeatType());
            seatNumbers.add(seatInfo.getNumOfSeats());
            seatLabel.setVerticalTextPosition(JLabel.TOP);
            seatLabel.setVerticalAlignment(JLabel.TOP);
            selectedSeatsPanel.add(seatLabel);
        }
        mainPanel.add(selectedSeatsPanel);

        // User information form
        JPanel userInfoPanel = new JPanel(new GridLayout(4, 2));
        userInfoPanel.setBorder(BorderFactory.createTitledBorder("User Information"));

        JTextField firstNameField = new JTextField();
        JTextField lastNameField = new JTextField();
        JTextField emailField = new JTextField();
        JTextField creditCardField = new JTextField();

        userInfoPanel.add(new JLabel("First Name:"));
        userInfoPanel.add(firstNameField);
        userInfoPanel.add(new JLabel("Last Name:"));
        userInfoPanel.add(lastNameField);
        userInfoPanel.add(new JLabel("Email:"));
        userInfoPanel.add(emailField);
        userInfoPanel.add(new JLabel("Credit Card Number:"));
        userInfoPanel.add(creditCardField);

        mainPanel.add(userInfoPanel);

        // Buttons
        JButton backButton = new JButton("Back");
        JButton payButton = new JButton("Pay");

        // Add action listeners to the buttons (implement the actions accordingly)
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                seats.setVisible(true);
                setVisible(false);
            }
        });
        payButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fName = firstNameField.getText();
                lName = lastNameField.getText();
                email = emailField.getText();
                ccNum = creditCardField.getText();
                long number = Long.parseLong(ccNum);
                int balance = 0;
                int insured = 0;

                balance = FlightInfoController.getCreditCardBalance(number);

                // Ask the user if they want insurance
                int insuranceChoice = JOptionPane.showConfirmDialog(MakePayment.this,
                        "Would you like to purchase insurance?", "Insurance",
                        JOptionPane.YES_NO_OPTION);

                // Set the value of 'insured' based on user's choice
                insured = (insuranceChoice == JOptionPane.YES_OPTION) ? 1 : 0;

                if (insured == 1) {
                    total = total + 25;
                }

                int flightNum = 0;
                String flightDest;
                String date;

                if (balance >= total) {
                    for (int i = 0; i < seatIds.size(); i++) {
                        System.out.println("First:  " + fName + "  Last:  " + lName + "   Email: " + email);
                        System.out.println("Model:  " + model + "  Type:  " + seatIds.get(i) + "   Num: "
                                + seatTypes.get(i) + "   Nums: " + seatNumbers.get(i));
                        FlightInfoController.makeBooking(model, fName, lName, email, seatTypes.get(i), insured,
                                seatNumbers.get(i));
                        FlightInfoController.changeAvailability(model, seatTypes.get(i),
                                seatNumbers.get(i));
                    }
                    flightNum = FlightInfoController.getFlightNum(model);
                    flightDest = FlightInfoController.getFlightDest(model);
                    date = FlightInfoController.getFlightDate(model);
                    JOptionPane.showMessageDialog(MakePayment.this, "Payment Successful!");

                    PaymentController pController;
                    try {
                        pController = new PaymentController(total, email, fName, lName, flightNum, flightDest, date,
                                seatNumbers, seatTypes);
                        pController.sortTickets();
                        pController.createAndSendReciept();
                    } catch (Exception e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }

                    FlightInfoController.updateBalance(number, total);
                } else {
                    JOptionPane.showMessageDialog(MakePayment.this, "Insufficient Balance! Please add more funds.");
                }

            }
        });

        // Create a panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(backButton);
        buttonPanel.add(payButton);

        mainPanel.add(buttonPanel);

        add(mainPanel);

        pack();
        setLocationRelativeTo(null);
        setVisible(false);
    }
}